const axiosW = require('./../utils/axios-wrapper');

async function isHoliday(event, date, employeeId) {
    let historicalBranchCompany = await findActiveHistoricalBranchCompany(event, employeeId);
    historicalBranchCompany = await findHistoricalBranchCompany(event, historicalBranchCompany.id);

    const branchId = historicalBranchCompany.newCompanyBranch.id;
    const holidayTableIds = await findBranchHolidaysTableIds(event, branchId);

    const holiday = await findHolidayDate(event, date, holidayTableIds);
    return holiday.totalElements > 0;
}

function findActiveHistoricalBranchCompany(event, employeeId) {
    return findHistoricalBranchCompanyByEmployee(event, employeeId)
        .then(historicals => {
            const lastHistorical = historicals.contents
                .filter(historical => historical.endDate === undefined);

            if (lastHistorical.length > 0) {
                return lastHistorical[0];
            }

            throw new Error(`Could not find active workshift for employee id ${employeeId}`);
        });
}

function findHistoricalBranchCompanyByEmployee(event, employeeId) {
    return axiosW.platformGet(event, '/hcm/payroll/entities/historicalCompanyBranch', {
        params: {
            filter: `employee eq '${employeeId}'`
        }
    });
}

function findHistoricalBranchCompany(event, historicalBranchCompanyId) {
    return axiosW.platformGet(event, `/hcm/payroll/entities/historicalCompanyBranch/${historicalBranchCompanyId}`);
}

async function findBranchHolidaysTableIds(event, branchId) {
    const holidayTableIds = new Set();

    const branchHolidays = await findBranchHolidays(event, branchId);
    branchHolidays.contents.forEach(branchHoliday => {
        if (branchHoliday.daytimeHoliday) {
            holidayTableIds.add(branchHoliday.daytimeHoliday);
        }
        if (branchHoliday.nightTimeHoliday) {
            holidayTableIds.add(branchHoliday.nightTimeHoliday);
        }
    });

    return Array.from(holidayTableIds);
}

function findBranchHolidays(event, branchId) {
    return axiosW.platformGet(event, '/hcm/payroll/entities/companyBranchHoliday', {
        filter: `companyBranchId='${branchId}'`
    });
}

function findHolidayDate(event, date, holidayTableId) {
    let holidayFilter = `'${holidayTableId.join('\', \'')}'`;

    const holidayDate = date.format('YYYY-MM-DD');
    return axiosW.platformGet(event, '/hcm/general_register/entities/holidayDates', {
        params: {
            offset: 0,
            size: 1,
            filter: `(holidayDate eq '${holidayDate}') and (holiday in (${holidayFilter}) )`
        }
    });
}

module.exports = {
    isHoliday
};
