const moment = require('moment');
const axiosW = require('./../utils/axios-wrapper');

async function isFired(event, employeeId) {
    const timeTracking = await findEmployeeTimeTracking(event, employeeId);

    // WORKING = Trabalhando
    // AWAY = Afastado
    // FIRED = Demitido
    return timeTracking.result.timeTrackingResumeType === 'FIRED';
}

function findEmployeeTimeTracking(event, employeeId) {
    let todayAtStartOfDay = moment().startOf('day').utcOffset(0);
    return axiosW.platformGet(event, '/hcm/payroll/queries/employeeVerifyTimeTrackingQuery', {
        params: {
            employeeId,
            startDate: todayAtStartOfDay.toISOString()
        }
    });
}

// Tem controle de apuração do ponto.
async function hasClockInAccessControl(event, employeeId) {
    const timeManagements = await findEmployeeTimeManagement(event, employeeId);
    const controlPoint = timeManagements.contents[0].controlPoint;
    return controlPoint === 'TYPE_1' || controlPoint === 'TYPE_2';
}

function findEmployeeTimeManagement(event, employeeId) {
    return axiosW.platformGet(event, '/hcm/payroll/entities/timeManagement', {
        params: {
            filter: `employee='${employeeId}'`
        }
    });
}

function findEmployee(event, employeeId) {
    return axiosW.platformGet(event, `/hcm/payroll/entities/employee/${employeeId}`);
}

function findEmployeeFinancialInformation(event, employeeId) {
    return axiosW.platformGet(event, '/hcm/payroll/entities/financeInformation', {
        filter: `employeeId='${employeeId}'`
    }).then(response => response.contents[0]);
}


module.exports = {
    isFired,
    hasClockInAccessControl,
    findEmployee,
    findEmployeeFinancialInformation
};
